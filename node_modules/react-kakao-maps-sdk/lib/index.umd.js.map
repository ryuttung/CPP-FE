{"version":3,"file":"index.umd.js","sources":["../src/util/kakaoMapApiLoader.ts","../src/hooks/useIsomorphicLayoutEffect.tsx","../src/hooks/useKakaoEvent.tsx","../src/components/Map.tsx","../src/hooks/useMap.tsx","../src/components/InfoWindow.tsx","../src/components/MarkerClusterer.tsx","../src/components/Marker.tsx","../src/components/MapMarker.tsx","../src/components/MapInfoWindow.tsx","../src/components/CustomOverlayMap.tsx","../src/components/MapTypeControl.tsx","../src/components/ZoomControl.tsx","../src/components/Circle.tsx","../src/components/Polyline.tsx","../src/components/Polygon.tsx","../src/components/Rectangle.tsx","../src/components/Ellipse.tsx","../src/components/AbstractOverlay.tsx","../src/components/Roadview.tsx","../src/hooks/useRoadview.tsx","../src/components/CustomOverlayRoadview.tsx","../src/components/RoadviewMarker.tsx","../src/components/RoadviewInfoWindow.tsx","../src/components/DrawingManager.tsx","../src/components/Toolbox.tsx","../src/components/StaticMap.tsx","../src/components/MapTypeId.tsx","../src/hooks/useInjectKakaoMapApi.tsx"],"sourcesContent":["export type Libraries = (\"services\" | \"clusterer\" | \"drawing\")[]\n\nexport interface LoaderOptions {\n  /**\n   * script 객체 생성시 사용자 정의 id\n   */\n  id?: string\n  /**\n   * 발급 받은 Kakao 지도 Javscript API 키.\n   *\n   * @see [준비하기](https://apis.map.kakao.com/web/guide/#ready)\n   */\n  appkey: string\n  /**\n   * 사용하는 라이브러리 목록\n   *\n   * Kakao 지도 Javascript API 는 지도와 함께 사용할 수 있는 라이브러리 를 지원하고 있습니다.\n   * 라이브러리는 javascript API와 관련되어 있지만 조금 특화된 기능을 묶어둔 것을 말합니다. 이 기능은 추가로 불러와서 사용할 수 있도록 되어있습니다.\n   * 현재 사용할 수 있는 라이브러리는 다음과 같습니다.\n   *\n   * clusterer: 마커를 클러스터링 할 수 있는 클러스터러 라이브러리 입니다.\n   * services: 장소 검색 과 주소-좌표 변환 을 할 수 있는 services 라이브러리 입니다.\n   * drawing: 지도 위에 마커와 그래픽스 객체를 쉽게 그릴 수 있게 그리기 모드를 지원하는 drawing 라이브러리 입니다.\n   * 라이브러리는 계속해서 추가될 예정입니다.\n   */\n  libraries?: Libraries\n  /**\n   * 사용자 정의 Kakao 지도 javascript 경로 지정\n   *\n   * @default \"//dapi.kakao.com/v2/maps/sdk.js\"\n   */\n  url?: string\n  /**\n   * 보안을 위한 nonce 값 설정\n   */\n  nonce?: string\n  /**\n   * 스크립트 로드 재시도 횟수\n   */\n  retries?: number\n}\n\nexport enum LoaderStatus {\n  INITIALIZED,\n  LOADING,\n  SUCCESS,\n  FAILURE,\n}\n\nconst DEFAULT_ID = \"__reactKakaoMapsSdkloaderId\"\n\n/**\n * Kakao Map Api Loader\n *\n * `new Loader(options).load()` 함수를 이용하여 Api를 비동기적으로 삽입할 수 있습니다.\n *\n * 해당 Loader를 이용시 `react-kakao-maps-sdk` 내부에서 injection 되는 이벤트를 감지하여 kakao map api 로딩 이후에 렌더링을 진행합니다.\n */\nexport class Loader {\n  private static instance: Loader\n  private static loadcheckcallbacks: ((e?: ErrorEvent) => void)[] = []\n\n  public readonly id: string\n  public readonly appkey: string\n  public readonly url: string\n  public readonly libraries: Libraries\n  public readonly nonce: string | undefined\n  public readonly retries: number\n\n  private callbacks: ((e?: ErrorEvent) => void)[] = []\n  private done = false\n  private loading = false\n  private errors: ErrorEvent[] = []\n  private onerrorEvent: ErrorEvent | undefined\n\n  constructor({\n    appkey,\n    id = DEFAULT_ID,\n    libraries = [],\n    nonce,\n    retries = 3,\n    url = \"//dapi.kakao.com/v2/maps/sdk.js\",\n  }: LoaderOptions) {\n    this.id = id\n    this.appkey = appkey\n    this.libraries = libraries\n    this.nonce = nonce\n    this.retries = retries\n    this.url = url\n\n    if (Loader.instance) {\n      if (!Loader.equalOptions(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        )\n      }\n\n      return Loader.instance\n    }\n    Loader.instance = this\n  }\n\n  public get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url,\n    }\n  }\n\n  public static isLoaded(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (window.kakao && window.kakao.maps) return resolve(true)\n\n      if (!Loader.instance)\n        return Loader.loadcheckcallbacks.push((e) => {\n          resolve(!e)\n        })\n\n      if (\n        Loader.instance.status === LoaderStatus.FAILURE ||\n        Loader.instance.status === LoaderStatus.INITIALIZED\n      ) {\n        return resolve(false)\n      }\n\n      if (Loader.instance.status === LoaderStatus.LOADING) {\n        Loader.loadcheckcallbacks.push((e) => resolve(!e))\n      }\n\n      return resolve(true)\n    })\n  }\n\n  public load(): Promise<typeof kakao> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err?: ErrorEvent) => {\n        if (!err) {\n          resolve(window.kakao)\n        } else {\n          reject(err.error)\n        }\n      })\n    })\n  }\n\n  public get status(): LoaderStatus {\n    if (this.onerrorEvent) {\n      return LoaderStatus.FAILURE\n    }\n    if (this.done) {\n      return LoaderStatus.SUCCESS\n    }\n    if (this.loading) {\n      return LoaderStatus.LOADING\n    }\n    return LoaderStatus.INITIALIZED\n  }\n\n  private get failed(): boolean {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1\n  }\n\n  private loadCallback(fn: (e?: ErrorEvent) => void): void {\n    this.callbacks.push(fn)\n    this.execute()\n  }\n\n  private resetIfRetryingFailed(): void {\n    if (this.failed) {\n      this.reset()\n    }\n  }\n\n  private reset(): void {\n    this.deleteScript()\n    this.done = false\n    this.loading = false\n    this.errors = []\n    this.onerrorEvent = undefined\n  }\n\n  private execute() {\n    this.resetIfRetryingFailed()\n\n    if (this.done) {\n      this.callback()\n    } else {\n      if (window.kakao && window.kakao.maps) {\n        console.warn(\n          \"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.\" +\n            \"설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"\n        )\n        this.callback()\n        return\n      }\n\n      if (!this.loading) {\n        this.loading = true\n        this.setScript()\n      }\n    }\n  }\n\n  private setScript() {\n    if (document.getElementById(this.id)) {\n      this.callback()\n    }\n\n    const url = this.createUrl()\n    const script = document.createElement(\"script\")\n\n    script.id = this.id\n    script.type = \"text/javascript\"\n    script.src = url\n    script.onerror = this.loadErrorCallback.bind(this)\n    script.onload = this.callback.bind(this)\n    script.defer = true\n    script.async = true\n\n    if (this.nonce) {\n      script.nonce = this.nonce\n    }\n\n    document.head.appendChild(script)\n  }\n\n  private loadErrorCallback(\n    event: Event | string,\n    source?: string,\n    lineno?: number,\n    colno?: number,\n    error?: Error\n  ): void {\n    this.errors.push({\n      event,\n      source,\n      // @ts-ignore\n      lineno,\n      // @ts-ignore\n      colno,\n      error,\n    })\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length\n\n      console.log(`Failed to load Kakao Maps script, retrying in ${delay} ms.`)\n\n      setTimeout(() => {\n        this.deleteScript()\n        this.setScript()\n      }, delay)\n    } else {\n      this.onerrorEvent = this.errors[this.errors.length - 1]\n      this.callback()\n    }\n  }\n\n  public createUrl(): string {\n    let url = this.url\n    url += `?appkey=${this.appkey}`\n\n    if (this.libraries.length) {\n      url += `&libraries=${this.libraries.join(\",\")}`\n    }\n\n    url += `&autoload=false`\n\n    return url\n  }\n\n  private deleteScript() {\n    const script = document.getElementById(this.id)\n    if (script) {\n      script.remove()\n    }\n  }\n\n  private callback() {\n    kakao.maps.load(() => {\n      this.done = true\n      this.loading = false\n\n      this.callbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      this.callbacks = []\n\n      Loader.loadcheckcallbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      Loader.loadcheckcallbacks = []\n    })\n  }\n\n  private static equalOptions(\n    a: typeof Loader.prototype.options,\n    b: typeof Loader.prototype.options\n  ): boolean {\n    if (a.appkey !== b.appkey) return false\n    if (a.id !== b.id) return false\n\n    if (a.libraries.length !== b.libraries.length) return false\n    for (let i = 0; i < a.libraries.length; ++i) {\n      if (a.libraries[i] !== b.libraries[i]) return false\n    }\n    if (a.nonce !== b.nonce) return false\n    if (a.retries !== b.retries) return false\n    if (a.url !== b.url) return false\n    return true\n  }\n}\n","import { useEffect, useLayoutEffect } from \"react\"\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" && typeof document !== \"undefined\"\n    ? useLayoutEffect\n    : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import useIsomorphicLayoutEffect from \"./useIsomorphicLayoutEffect\"\n\nconst useKakaoEvent = <T extends kakao.maps.event.EventTarget>(\n  /**\n   * 이벤트 타겟\n   */\n  target: T | undefined,\n  /**\n   * event 타입\n   */\n  type: string,\n  /**\n   * 호출될 callback\n   */\n  callback: ((target: T, ...args: any[]) => void) | undefined\n) => {\n  useIsomorphicLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    kakao.maps.event.addListener(target, type, wrapCallback)\n\n    return () => {\n      kakao.maps.event.removeListener(target, type, wrapCallback)\n    }\n  }, [target, type, callback])\n}\n\nexport default useKakaoEvent\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoMapContext = React.createContext<kakao.maps.Map>(\n  undefined as unknown as kakao.maps.Map\n)\n\nexport interface MapProps {\n  /**\n   * MapContinaer의 id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * MapContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * MapContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  /**\n   * 중심을 이동시킬때 Panto를 사용할지 정합니다.\n   * @default false\n   */\n  isPanto?: boolean\n\n  /**\n   * 중심 좌표를 지정한 좌표 또는 영역으로 부드럽게 이동한다. 필요하면 확대 또는 축소도 수행한다.\n   * 만약 이동할 거리가 지도 화면의 크기보다 클 경우 애니메이션 없이 이동한다.\n   * padding 만큼 제외하고 영역을 계산하며, padding 을 지정하지 않으면 기본값으로 32가 사용된다.\n   */\n  padding?: number\n\n  /**\n   * 확대 수준 (기본값: 3)\n   */\n  level?: number\n\n  /**\n   * 최대 확대 수준\n   */\n  maxLevel?: number\n\n  /**\n   * 최소 확대 수준\n   */\n  minLevel?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 마우스 드래그, 휠, 모바일 터치를 이용한 시점 변경(이동, 확대, 축소) 가능 여부\n   */\n  draggable?: boolean\n\n  /**\n   * 마우스 휠이나 멀티터치로 지도 확대, 축소 기능을 막습니다. 상황에 따라 지도 확대, 축소 기능을 제어할 수 있습니다.\n   */\n  zoomable?: boolean\n\n  /**\n   * 마우스 휠, 모바일 터치를 이용한 확대 및 축소 가능 여부\n   */\n  scrollwheel?: boolean\n\n  /**\n   * 더블클릭 이벤트 및 더블클릭 확대 가능 여부\n   */\n  disableDoubleClick?: boolean\n\n  /**\n   * 더블클릭 확대 가능 여부\n   */\n  disableDoubleClickZoom?: boolean\n\n  /**\n   * 투영법 지정 (기본값: kakao.maps.ProjectionId.WCONG)\n   */\n  projectionId?: string\n\n  /**\n   * 지도 타일 애니메이션 설정 여부 (기본값: true)\n   */\n  tileAnimation?: boolean\n\n  /**\n   * 키보드의 방향키와 +, – 키로 지도 이동,확대,축소 가능 여부 (기본값: false)\n   */\n  keyboardShortcuts?:\n    | boolean\n    | {\n        /**\n         * 지도 이동 속도\n         */\n        speed: number\n      }\n\n  /**\n   * map 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (map: kakao.maps.Map) => void\n\n  /**\n   * 중심 좌표가 변경되면 발생한다.\n   */\n  onCenterChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되기 직전 발생한다.\n   */\n  onZoomStart?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되면 발생한다.\n   */\n  onZoomChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 영역이 변경되면 발생한다.\n   */\n  onBoundsChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도를 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 더블클릭하면 발생한다.\n   */\n  onDoubleClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 마우스 오른쪽 버튼으로 클릭하면 발생한다.\n   */\n  onRightClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도에서 마우스 커서를 이동하면 발생한다.\n   */\n  onMouseMove?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 시작할 때 발생한다.\n   */\n  onDragStart?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 하는 동안 발생한다.\n   */\n  onDrag?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그가 끝날 때 발생한다.\n   */\n  onDragEnd?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 중심 좌표나 확대 수준이 변경되면 발생한다.\n   * 단, 애니메이션 도중에는 발생하지 않는다.\n   */\n  onIdle?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대수준이 변경되거나 지도가 이동했을때 타일 이미지 로드가 모두 완료되면 발생한다.\n   * 지도이동이 미세하기 일어나 타일 이미지 로드가 일어나지 않은경우 발생하지 않는다.\n   */\n  onTileLoaded?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 기본 타일(일반지도, 스카이뷰, 하이브리드)이 변경되면 발생한다.\n   */\n  onMaptypeidChanged?: (target: kakao.maps.Map) => void\n}\n\n/**\n * 기본적인 Map 객체를 생성하는 Comeponent 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 함께 인자로 전달 합니다.\n *\n * `ref`를 통해 `map` 객체에 직접 접근하여 사용 또는 onCreate 이벤트를 이용하여 접근이 가능합니다.\n *\n * > *주의 사항* `Map`, `RoadView` 컴포넌트에 한하여, ref 객체가 컴포넌트 마운트 시점에 바로 초기화가 안될 수 있습니다.\n * >\n * > 컴포넌트 마운트 시점에 `useEffect` 를 활용하여, 특정 로직을 수행하고 싶은 경우 `ref` 객체를 사용하는 것보다\n * > `onCreate` 이벤트와 `useState`를 함께 활용하여 제어하는 것을 추천 드립니다.\n */\nconst Map = React.forwardRef<kakao.maps.Map, React.PropsWithChildren<MapProps>>(\n  (\n    {\n      id = \"react-kakao-maps-sdk-map-container\",\n      style,\n      children,\n      center,\n      isPanto = false,\n      padding = 32,\n      className,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      draggable,\n      zoomable,\n      keyboardShortcuts,\n      level,\n      maxLevel,\n      minLevel,\n      mapTypeId,\n      projectionId,\n      scrollwheel,\n      tileAnimation,\n      onBoundsChanged,\n      onCenterChanged,\n      onClick,\n      onDoubleClick,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onIdle,\n      onMaptypeidChanged,\n      onMouseMove,\n      onRightClick,\n      onTileLoaded,\n      onZoomChanged,\n      onZoomStart,\n      onCreate,\n    },\n    ref\n  ) => {\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [map, setMap] = useState<kakao.maps.Map>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const MapContainer = container.current\n\n      if (!MapContainer) {\n        return\n      }\n\n      const initalMapCenter =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      const kakaoMap = new kakao.maps.Map(MapContainer, {\n        center: initalMapCenter,\n        disableDoubleClick: disableDoubleClick,\n        disableDoubleClickZoom: disableDoubleClickZoom,\n        draggable: draggable,\n        keyboardShortcuts: keyboardShortcuts,\n        level: level,\n        mapTypeId: mapTypeId,\n        projectionId: projectionId,\n        scrollwheel: scrollwheel,\n        tileAnimation: tileAnimation,\n      })\n\n      setMap(kakaoMap)\n    }, [\n      isLoaded,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      mapTypeId,\n      tileAnimation,\n    ])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !onCreate) return\n      onCreate(map)\n    }, [map, onCreate])\n\n    // center position 변경시 map center 변경\n    useIsomorphicLayoutEffect(() => {\n      if (!map) return\n\n      let prevCenter = map.getCenter()\n      if (prevCenter instanceof kakao.maps.Coords) {\n        prevCenter = prevCenter.toLatLng()\n      }\n\n      const centerPosition =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      if (\n        (centerPosition instanceof kakao.maps.LatLng &&\n          centerPosition.equals(prevCenter)) ||\n        (centerPosition instanceof kakao.maps.Coords &&\n          centerPosition.toLatLng().equals(prevCenter))\n      ) {\n        return\n      }\n\n      if (isPanto) {\n        map.panTo(centerPosition, padding)\n      } else {\n        map.setCenter(centerPosition)\n      }\n      // @ts-ignore\n    }, [map, center.lat, center.lng, center.x, center.y])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof draggable === \"undefined\") return\n      map.setDraggable(draggable)\n    }, [map, draggable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof zoomable === \"undefined\") return\n      map.setZoomable(zoomable)\n    }, [map, zoomable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !keyboardShortcuts || typeof keyboardShortcuts !== \"boolean\")\n        return\n      map.setKeyboardShortcuts(keyboardShortcuts)\n    }, [map, keyboardShortcuts])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !level) return\n      map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !mapTypeId) return\n      map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !projectionId) return\n      map.setProjectionId(projectionId)\n    }, [map, projectionId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !maxLevel) return\n      map.setMaxLevel(maxLevel)\n    }, [map, maxLevel])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !minLevel) return\n      map.setMinLevel(minLevel)\n    }, [map, minLevel])\n\n    useKakaoEvent(map, \"bounds_changed\", onBoundsChanged)\n    useKakaoEvent(map, \"center_changed\", onCenterChanged)\n    useKakaoEvent(map, \"click\", onClick)\n    useKakaoEvent(map, \"dblclick\", onDoubleClick)\n    useKakaoEvent(map, \"drag\", onDrag)\n    useKakaoEvent(map, \"dragstart\", onDragStart)\n    useKakaoEvent(map, \"dragend\", onDragEnd)\n    useKakaoEvent(map, \"idle\", onIdle)\n    useKakaoEvent(map, \"maptypeid_changed\", onMaptypeidChanged)\n    useKakaoEvent(map, \"mousemove\", onMouseMove)\n    useKakaoEvent(map, \"rightclick\", onRightClick)\n    useKakaoEvent(map, \"tilesloaded\", onTileLoaded)\n    useKakaoEvent(map, \"zoom_changed\", onZoomChanged)\n    useKakaoEvent(map, \"zoom_start\", onZoomStart)\n\n    return (\n      <>\n        <div id={id} style={style} className={className} ref={container}></div>\n        {map && (\n          <KakaoMapContext.Provider value={map}>\n            {children}\n          </KakaoMapContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Map\n","import { useContext } from \"react\"\nimport { KakaoMapContext } from \"../components/Map\"\n\n/**\n * kakao map 객체를 가져오는 hook 입니다.\n * Map 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useMap = (componentName?: string) => {\n  const kakaoMap = useContext(KakaoMapContext)\n  if (!kakaoMap) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useMap\"\n      } must exist inside Map Component!`\n    )\n  }\n\n  return kakaoMap\n}\n\nexport default useMap\n","import React, {\n  useLayoutEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDom from \"react-dom\"\n\ninterface InfoWindowProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n  marker?: kakao.maps.Marker\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부\n   * @default false\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\nconst InfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<InfoWindowProps>\n>(\n  (\n    {\n      map,\n      position,\n      marker,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const container = useRef(document.createElement(\"div\"))\n\n    const infoWindow = useMemo(() => {\n      const kakaoInfoWindow = new kakao.maps.InfoWindow({\n        altitude: altitude,\n        disableAutoPan: disableAutoPan,\n        range: range,\n        removable: removable,\n        zIndex: zIndex,\n        content: container.current,\n        position: position,\n      })\n      container.current.style.display = \"none\"\n      return kakaoInfoWindow\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disableAutoPan, removable])\n\n    useImperativeHandle(ref, () => infoWindow, [infoWindow])\n\n    useLayoutEffect(() => {\n      infoWindow.open(map, marker)\n      return () => {\n        infoWindow.close()\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(infoWindow)\n    }, [infoWindow, onCreate])\n\n    useLayoutEffect(() => {\n      if (!infoWindow) return\n      infoWindow.setPosition(position)\n    }, [infoWindow, position])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !altitude) return\n      infoWindow.setAltitude(altitude)\n    }, [infoWindow, altitude])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !range) return\n      infoWindow.setRange(range)\n    }, [infoWindow, range])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !zIndex) return\n      infoWindow.setZIndex(zIndex)\n    }, [infoWindow, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDom.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default InfoWindow\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport const KakaoMapMarkerClustererContext =\n  React.createContext<kakao.maps.MarkerClusterer>(\n    undefined as unknown as kakao.maps.MarkerClusterer\n  )\n\nexport interface MarkerClustererProps {\n  /**\n   * 클러스터의 격자 크기. 화면 픽셀 단위이며 해당 격자 영역 안에 마커가 포함되면 클러스터에 포함시킨다\n   * @default 60\n   */\n  gridSize?: number\n  /**\n   * 마커들의 좌표 평균을 클러스터 좌표 설정 여부\n   * @default false\n   */\n  averageCenter?: boolean\n  /**\n   * 클러스터링 할 지도의 최소 레벨 값. 지정한 숫자에 해당하는 레벨 미만에서는 클러스터링 하지 않는다\n   * @default 0\n   */\n  minLevel?: number\n  /**\n   * 클러스터링 할 최소 마커 수\n   * @default 2\n   */\n  minClusterSize?: number\n  /**\n   * 클러스터의 스타일. 여러개를 선언하면 calculator 로 구분된 사이즈 구간마다 서로 다른 스타일을 적용시킬 수 있다\n   */\n  styles?: React.CSSProperties[] | object[]\n  /**\n   * 클러스터에 표시할 문자열 또는 문자열 생성 함수.\n   * @default \"클러스터에 포함된 숫자\"\n   */\n  texts?: string[] | ((size: number) => string)\n  /**\n   * 클러스터 크기를 구분하는 값을 가진 배열 또는 구분값 생성함수\n   * @default [10, 100, 1000, 10000]\n   */\n  calculator?: number[] | ((size: number) => number[])\n  /**\n   * 클러스터 클릭 시 지도 확대 여부. true로 설정하면 클러스터 클릭 시 확대 되지 않는다\n   * @default false\n   */\n  disableClickZoom?: boolean\n  /**\n   * 클러스터 클릭 가능 여부 지정 옵션. false일 경우 클러스터의 clusterclick, clusterdblclick, clusterrightclick 이벤트가 발생하지 않으며, 커서가 변경되지 않는다.\n   * @default true\n   */\n  clickable?: boolean\n  /**\n   * 클러스터에 마우스 over/out 가능 여부 지정 옵션. false일 경우 클러스터의 clusterover, clusterout 이벤트가 발생하지 않는다.\n   * @default true\n   */\n  hoverable?: boolean\n\n  /**\n   * 클러스터 마커를 클릭 했을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 Cluster 객체가 넘어온다.\n   * 클러스터 마커 클릭 시 지도가 줌인 되는 경우 원하는 Cluster 객체를 얻지 못할 수도 있다.\n   * 때문에 MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정하여\n   * 클러스터 마커를 클릭했을 때 지도가 줌인되지 않도록 설정 후 사용한다.\n   */\n  onClusterclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 오버 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 오버한 Cluster 객체가 넘어온다.\n   */\n  onClusterover?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 아웃 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 아웃된 Cluster 객체가 넘어온다.\n   */\n  onClusterout?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 더블클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 더블클릭한 Cluster 객체가 넘어온다.\n   * MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정해야만 이벤트가 발생한다.\n   */\n  onClusterdblclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 오른쪽 클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 오른쪽 클릭한 Cluster 객체가 넘어온다.\n   */\n  onClusterrightclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터링이 완료됐을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 생성된 Cluster 객체 전체가 배열로 넘어온다.\n   */\n  onClustered?: (\n    target: kakao.maps.MarkerClusterer,\n    clusters: kakao.maps.Cluster[]\n  ) => void\n  /**\n   * MarkerClusterer 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (target: kakao.maps.MarkerClusterer) => void\n}\n\nconst MarkerClusterer = React.forwardRef<\n  kakao.maps.MarkerClusterer,\n  React.PropsWithChildren<MarkerClustererProps>\n>(\n  (\n    {\n      children,\n      averageCenter,\n      calculator,\n      clickable,\n      disableClickZoom,\n      gridSize,\n      hoverable,\n      minClusterSize,\n      minLevel,\n      styles,\n      texts,\n      onClusterclick,\n      onClusterdblclick,\n      onClustered,\n      onClusterout,\n      onClusterover,\n      onClusterrightclick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`MarkerClusterer`)\n    const markerCluster = useMemo(() => {\n      if (!window.kakao.maps.MarkerClusterer) {\n        console.warn(\n          \"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n      return new kakao.maps.MarkerClusterer({\n        averageCenter,\n        calculator,\n        clickable,\n        disableClickZoom,\n        gridSize,\n        hoverable,\n        minClusterSize,\n        minLevel,\n        styles,\n        texts,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => markerCluster!, [markerCluster])\n\n    useLayoutEffect(() => {\n      markerCluster?.setMap(map)\n    }, [map, markerCluster])\n\n    useLayoutEffect(() => {\n      if (markerCluster && onCreate) onCreate(markerCluster)\n    }, [markerCluster, onCreate])\n\n    useLayoutEffect(() => {\n      if (markerCluster && gridSize) {\n        markerCluster.setGridSize(gridSize)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, gridSize])\n\n    useLayoutEffect(() => {\n      if (markerCluster && minClusterSize) {\n        markerCluster.setMinClusterSize(minClusterSize)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, minClusterSize])\n\n    useLayoutEffect(() => {\n      if (markerCluster && typeof averageCenter !== \"undefined\") {\n        markerCluster.setAverageCenter(averageCenter)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, averageCenter])\n\n    useLayoutEffect(() => {\n      if (markerCluster && minLevel) {\n        markerCluster.setMinLevel(minLevel)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, minLevel])\n\n    useLayoutEffect(() => {\n      if (markerCluster && texts) {\n        markerCluster.setTexts(texts)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, texts])\n\n    useLayoutEffect(() => {\n      if (markerCluster && calculator) {\n        markerCluster.setCalculator(calculator)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, calculator])\n\n    useLayoutEffect(() => {\n      if (markerCluster && styles) {\n        markerCluster.setStyles(styles)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, styles])\n\n    useKakaoEvent(markerCluster, \"clusterclick\", onClusterclick)\n    useKakaoEvent(markerCluster, \"clusterover\", onClusterover)\n    useKakaoEvent(markerCluster, \"clusterout\", onClusterout)\n    useKakaoEvent(markerCluster, \"clusterdblclick\", onClusterdblclick)\n    useKakaoEvent(markerCluster, \"clusterrightclick\", onClusterrightclick)\n    useKakaoEvent(markerCluster, \"clustered\", onClustered)\n\n    if (!markerCluster) {\n      return null\n    }\n\n    return (\n      <KakaoMapMarkerClustererContext.Provider value={markerCluster}>\n        {children}\n      </KakaoMapMarkerClustererContext.Provider>\n    )\n  }\n)\n\nexport default MarkerClusterer\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport InfoWindow from \"./InfoWindow\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\ninterface MarkerProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n\n  /**\n   * marker 생성 후 marker 객체를 전달하는 callback\n   */\n  onCreate?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * 마커의 이미지\n   */\n  image?: kakao.maps.MarkerImage\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n\n    /**\n     * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n     */\n    altitude?: number\n\n    /**\n     * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n     */\n    range?: number\n  }\n}\n\nconst Marker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MarkerProps>\n>(\n  (\n    {\n      map,\n      position,\n      children,\n      altitude,\n      clickable,\n      draggable,\n      image,\n      infoWindowOptions,\n      onCreate,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    // Marker 객체는 단 한번만 생성 되도록 함\n    const marker = useMemo(() => {\n      const kakaoMarker = new kakao.maps.Marker({\n        altitude,\n        clickable,\n        draggable,\n        image,\n        opacity,\n        range,\n        title,\n        zIndex,\n        position,\n      })\n\n      return kakaoMarker\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => marker, [marker])\n\n    useLayoutEffect(() => {\n      if (markerCluster) {\n        markerCluster.addMarker(marker)\n      } else {\n        marker.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(marker)\n        } else {\n          marker.setMap(null)\n        }\n      }\n    }, [map, markerCluster, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(marker)\n    }, [marker, onCreate])\n\n    useKakaoEvent(marker, \"click\", onClick)\n    useKakaoEvent(marker, \"dragstart\", onDragStart)\n    useKakaoEvent(marker, \"dragend\", onDragEnd)\n    useKakaoEvent(marker, \"mouseout\", onMouseOut)\n    useKakaoEvent(marker, \"mouseover\", onMouseOver)\n\n    // position이 변경되면 객체를 갱신한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !position) return\n\n      marker.setPosition(position)\n    }, [map, marker, position])\n\n    // image 객체가 존재하면 이미지를 로드한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !image) return\n\n      marker.setImage(image)\n    }, [map, marker, image])\n\n    // altitude 값이 있으면 높이를 조정한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !altitude) return\n\n      marker.setAltitude(altitude)\n    }, [map, marker, altitude])\n\n    // clickable 값이 있으면 클릭이 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof clickable === \"undefined\") return\n\n      marker.setClickable(clickable)\n    }, [map, marker, clickable])\n\n    // draggable 값이 있으면 드래그가 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof draggable === \"undefined\") return\n\n      marker.setDraggable(draggable)\n    }, [map, marker, draggable])\n\n    // opacity 값이 있으면 투명도를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !opacity) return\n\n      marker.setOpacity(opacity)\n    }, [map, marker, opacity])\n\n    // range 값이 있으면 마커의 가시반경을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !range) return\n\n      marker.setRange(range)\n    }, [map, marker, range])\n\n    // title 값이 있으면 마커의 제목을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !title) return\n\n      marker.setTitle(title)\n    }, [map, marker, title])\n\n    // zIndex 값이 있으면 마커의 zindex를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !zIndex) return\n\n      marker.setZIndex(zIndex)\n    }, [map, marker, zIndex])\n\n    if (children)\n      return (\n        <InfoWindow\n          position={position}\n          map={map}\n          marker={marker}\n          altitude={infoWindowOptions?.altitude}\n          disableAutoPan={infoWindowOptions?.disableAutoPan}\n          range={infoWindowOptions?.range}\n          removable={infoWindowOptions?.removable}\n          zIndex={infoWindowOptions?.zIndex}\n        >\n          {children}\n        </InfoWindow>\n      )\n\n    return null\n  }\n)\n\nexport default Marker\n","import React, { useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport Marker from \"./Marker\"\n\nexport interface MapMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MapMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      clickable,\n      draggable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`MapMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Coords(position.x, position.y).toLatLng()\n\n      // @ts-ignore\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [position.lat, position.lng, position.x, position.y])\n\n    return (\n      <Marker\n        map={map}\n        position={markerPosition}\n        image={markerImage}\n        clickable={clickable}\n        draggable={draggable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default MapMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapInfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<MapInfoWindowProps>\n>(\n  (\n    { position, children, disableAutoPan, removable, zIndex, onCreate },\n    ref\n  ) => {\n    const map = useMap(`MapInfoWindow`)\n    const infoPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    return (\n      <InfoWindow\n        disableAutoPan={disableAutoPan}\n        removable={removable}\n        zIndex={zIndex}\n        map={map}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default MapInfoWindow\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useMap from \"../hooks/useMap\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\nexport interface CustomOverlayMapProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Map에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayMap = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayMapProps>\n>(\n  (\n    { position, children, clickable, xAnchor, yAnchor, zIndex, onCreate },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    const map = useMap(`CustomOverlayMap`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!map) return\n\n      if (markerCluster) {\n        markerCluster.addMarker(overlay)\n      } else {\n        overlay.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(overlay)\n        } else {\n          overlay.setMap(null)\n        }\n      }\n    }, [map, markerCluster, overlay])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayMap\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeControlProps {\n  /**\n   * MapTypeControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 일반 지도/하이브리드 간 지도 타입 전환 컨트롤을 생성한다.\n * 현재는 일반 지도/하이브리드 간 전환 컨트롤만 지원되며 다른 지도 타입을 제어하는 컨트롤이 필요할 경우에는 직접 구현해야 한다.\n */\nconst MapTypeControl = React.forwardRef<\n  kakao.maps.MapTypeControl,\n  MapTypeControlProps\n>(({ position = kakao.maps.ControlPosition.TOPRIGHT }, ref) => {\n  const map = useMap(`MapTypeControl`)\n\n  const mapTypeControl = useMemo(() => {\n    return new kakao.maps.MapTypeControl()\n  }, [])\n\n  useImperativeHandle(ref, () => mapTypeControl, [mapTypeControl])\n\n  useLayoutEffect(() => {\n    map.addControl(mapTypeControl, position)\n\n    return () => {\n      map.removeControl(mapTypeControl)\n    }\n  }, [map, mapTypeControl, position])\n\n  return null\n})\n\nexport default MapTypeControl\n","import React, { useEffect, useImperativeHandle, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface ZoomControlProps {\n  /**\n   * ZoomControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 확대·축소 컨트롤을 생성한다.\n */\nconst ZoomControl = React.forwardRef<kakao.maps.ZoomControl, ZoomControlProps>(\n  ({ position = kakao.maps.ControlPosition.RIGHT }, ref) => {\n    const map = useMap(`ZoomControl`)\n\n    const ZoomControl = useMemo(() => {\n      return new kakao.maps.ZoomControl()\n    }, [])\n\n    useImperativeHandle(ref, () => ZoomControl, [ZoomControl])\n\n    useEffect(() => {\n      map.addControl(ZoomControl, position)\n\n      return () => {\n        map.removeControl(ZoomControl)\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, position])\n\n    return null\n  }\n)\n\nexport default ZoomControl\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface CircleProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 원의 반지름 크기를 지정합니다 (미터 단위).\n   */\n  radius: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Circle) => void\n}\n\n/**\n * Map 상에 원을 그립니다.\n */\nconst Circle = React.forwardRef<kakao.maps.Circle, CircleProps>(\n  (\n    {\n      center,\n      radius,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Circle`)\n\n    const circleCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const circle = useMemo(() => {\n      return new kakao.maps.Circle({\n        center: circleCenter,\n        radius,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => circle, [circle])\n\n    useLayoutEffect(() => {\n      circle.setMap(map)\n      return () => {\n        circle.setMap(null)\n      }\n    }, [map, circle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(circle)\n    }, [circle, onCreate])\n\n    useLayoutEffect(() => {\n      if (circle) circle.setPosition(circleCenter)\n    }, [circle, circleCenter])\n\n    useLayoutEffect(() => {\n      circle.setRadius(radius)\n    }, [circle, radius])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      circle.setZIndex(zIndex)\n    }, [circle, zIndex])\n\n    useLayoutEffect(() => {\n      circle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      circle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(circle, \"mouseover\", onMouseover)\n    useKakaoEvent(circle, \"mouseout\", onMouseout)\n    useKakaoEvent(circle, \"mousemove\", onMousemove)\n    useKakaoEvent(circle, \"mousedown\", onMousedown)\n    useKakaoEvent(circle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Circle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolylineProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * 화살표 여부\n   */\n  endArrow?: boolean\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polyline) => void\n}\n\n/**\n * Map 상에 폴리라인을 그립니다.\n */\nconst Polyline = React.forwardRef<kakao.maps.Polyline, PolylineProps>(\n  (\n    {\n      path,\n      endArrow,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polyline`)\n\n    const polyLinePath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polyline = useMemo(() => {\n      return new kakao.maps.Polyline({\n        path: polyLinePath,\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polyline, [polyline])\n\n    useLayoutEffect(() => {\n      polyline.setMap(map)\n      return () => polyline.setMap(null)\n    }, [map, polyline])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polyline)\n    }, [polyline, onCreate])\n\n    useLayoutEffect(() => {\n      polyline.setOptions({\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polyline,\n      endArrow,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polyline.setPath(polyLinePath)\n    }, [polyline, polyLinePath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polyline.setZIndex(zIndex)\n    }, [polyline, zIndex])\n\n    useKakaoEvent(polyline, \"mouseover\", onMouseover)\n    useKakaoEvent(polyline, \"mouseout\", onMouseout)\n    useKakaoEvent(polyline, \"mousemove\", onMousemove)\n    useKakaoEvent(polyline, \"mousedown\", onMousedown)\n    useKakaoEvent(polyline, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polyline\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolygonProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polygon) => void\n}\n\n/**\n * Map 상에 다각형을 그립니다.\n */\nconst Polygon = React.forwardRef<kakao.maps.Polygon, PolygonProps>(\n  (\n    {\n      path,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polygon`)\n\n    const polygonPath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polygon = useMemo(() => {\n      return new kakao.maps.Polygon({\n        path: polygonPath,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polygon, [polygon])\n\n    useLayoutEffect(() => {\n      polygon.setMap(map)\n      return () => polygon.setMap(null)\n    }, [map, polygon])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polygon)\n    }, [polygon, onCreate])\n\n    useLayoutEffect(() => {\n      polygon.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polygon,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polygon.setPath(polygonPath)\n    }, [polygon, polygonPath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polygon.setZIndex(zIndex)\n    }, [polygon, zIndex])\n\n    useKakaoEvent(polygon, \"mouseover\", onMouseover)\n    useKakaoEvent(polygon, \"mouseout\", onMouseout)\n    useKakaoEvent(polygon, \"mousemove\", onMousemove)\n    useKakaoEvent(polygon, \"mousedown\", onMousedown)\n    useKakaoEvent(polygon, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polygon\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface RectangleProps {\n  bounds: {\n    sw: LatLng\n    ne: LatLng\n  }\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Rectangle) => void\n}\n\n/**\n * Map 상에 사각형을 그립니다.\n */\nconst Rectangle = React.forwardRef<kakao.maps.Rectangle, RectangleProps>(\n  (\n    {\n      bounds,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Rectangle`)\n\n    const rectangleBounds = useMemo(() => {\n      return new kakao.maps.LatLngBounds(\n        new kakao.maps.LatLng(bounds.sw.lat, bounds.sw.lng),\n        new kakao.maps.LatLng(bounds.ne.lat, bounds.ne.lng)\n      )\n    }, [bounds])\n\n    const rectangle = useMemo(() => {\n      return new kakao.maps.Rectangle({\n        bounds: rectangleBounds,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => rectangle, [rectangle])\n\n    useLayoutEffect(() => {\n      rectangle.setMap(map)\n      return () => rectangle.setMap(null)\n    }, [map, rectangle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(rectangle)\n    }, [rectangle, onCreate])\n\n    useLayoutEffect(() => {\n      rectangle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      rectangle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      rectangle.setBounds(rectangleBounds)\n    }, [rectangle, rectangleBounds])\n\n    useLayoutEffect(() => {\n      if (zIndex) rectangle.setZIndex(zIndex)\n    }, [rectangle, zIndex])\n\n    useKakaoEvent(rectangle, \"mouseover\", onMouseover)\n    useKakaoEvent(rectangle, \"mouseout\", onMouseout)\n    useKakaoEvent(rectangle, \"mousemove\", onMousemove)\n    useKakaoEvent(rectangle, \"mousedown\", onMousedown)\n    useKakaoEvent(rectangle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Rectangle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface EllipseProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 미터 단위의 x축 반지름\n   */\n  rx: number\n\n  /**\n   * 미터 단위의 y축 반지름\n   */\n  ry: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n\n  /**\n   * 타원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 타원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 타원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Ellipse) => void\n}\n\n/**\n * Map 상에 타원을 그립니다.\n */\nconst Ellipse = React.forwardRef<kakao.maps.Ellipse, EllipseProps>(\n  (\n    {\n      center,\n      rx,\n      ry,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Ellipse`)\n\n    const ellipseCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const ellipse = useMemo(() => {\n      return new kakao.maps.Ellipse({\n        center: ellipseCenter,\n        rx,\n        ry,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => ellipse, [ellipse])\n\n    useLayoutEffect(() => {\n      ellipse.setMap(map)\n\n      return () => {\n        ellipse.setMap(null)\n      }\n    }, [map, ellipse])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(ellipse)\n    }, [ellipse, onCreate])\n\n    useLayoutEffect(() => {\n      if (ellipse) ellipse.setPosition(ellipseCenter)\n    }, [ellipse, ellipseCenter])\n\n    useLayoutEffect(() => {\n      ellipse.setRadius(rx, ry)\n    }, [ellipse, rx, ry])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      ellipse.setZIndex(zIndex)\n    }, [ellipse, zIndex])\n\n    useLayoutEffect(() => {\n      ellipse.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      ellipse,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(ellipse, \"mouseover\", onMouseover)\n    useKakaoEvent(ellipse, \"mouseout\", onMouseout)\n    useKakaoEvent(ellipse, \"mousemove\", onMousemove)\n    useKakaoEvent(ellipse, \"mousedown\", onMousedown)\n    useKakaoEvent(ellipse, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Ellipse\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface AbstractOverlayProps {\n  /**\n   * AbstractOverlay에서 필요한 `onAdd` 함수를 구현 합니다.\n   * 위치를 재조정할 필요가 있을 때 호출된다.\n   * 이 함수 내에서 엘리먼트의 위치를 잡아주어야 한다.\n   *\n   * 이때 arrow 함수가 아닌 일반 funtion으로 하여 this 바인딩이 되도록 하여 AbstractOverlay를 상속 받은 객체에 접근하여 필요 기능을 정의 합니다.\n   * ```tsx\n   * const panel = (this as kakao.maps.AbstractOverlay).getPanels().overlayLayer\n   * panel.appendChild(node.current)\n   * ```\n   */\n  draw: () => void\n  /**\n   * 지도에 올릴 때 호출된다.\n   * setMap(map) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 생성된 `DOM` 객체를 MapPanels에 자식 노드로 넣어주도록 한다.\n   *\n   * ```tsx\n   * var projection = this.getProjection()\n   * var point = projection.pointFromCoords(positionLatlng)\n   * var width = node.current.offsetWidth\n   * var height = node.current.offsetHeight\n   *\n   * console.log(point, width, height)\n   *\n   * node.current.style.left = point.x - width / 2 + \"px\"\n   * node.current.style.top = point.y - height / 2 + \"px\"\n   * ```\n   */\n  onAdd: () => void\n\n  /**\n   * 지도에서 제거할 때 호출된다.\n   * setMap(null) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 MapPanels에 자식 노드로 넣어준 엘리먼트를 제거하도록 한다.\n   *\n   * ```tsx\n   * this.node.parentNode.removeChild(this.node);\n   * ```\n   */\n  onRemove: () => void\n\n  /**\n   * 생성된 kakao.maps.AbstractOverlay 객체를 받을 수 있는 CallBack 함수 입니다.\n   */\n  onCreate?: (target: kakao.maps.AbstractOverlay) => void\n}\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay = React.forwardRef<\n  kakao.maps.AbstractOverlay,\n  AbstractOverlayProps\n>(({ draw, onAdd, onRemove, onCreate }, ref) => {\n  const map = useMap()\n\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw: () => void, onAdd: () => void, onRemove: () => void) {\n        super()\n        this.draw = draw\n        this.onAdd = onAdd\n        this.onRemove = onRemove\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove)\n    return overlay\n  }, [draw, onAdd, onRemove])\n\n  useImperativeHandle(ref, () => reactAbstractOverlay, [reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    reactAbstractOverlay.setMap(map)\n\n    return () => {\n      reactAbstractOverlay.setMap(null)\n    }\n  }, [map, reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay)\n  }, [reactAbstractOverlay, onCreate])\n\n  return null\n})\n\nexport default AbstractOverlay\n","import React, { useImperativeHandle, useRef, useState } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoRoadviewContext = React.createContext<kakao.maps.Roadview>(\n  undefined as unknown as kakao.maps.Roadview\n)\n\nexport interface RoadviewProps {\n  /**\n   * roadviewContinaer의 id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * roadviewContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * roadviewContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   * 해당 lat와 lng에 해당하는 radius범위 안에서 가장가까운 Roadview을 선택합니다.\n   * 만약 없다면 lat, lng로 설정 됩니다.\n   */\n  position: {\n    lat: number\n    lng: number\n    radius: number\n  }\n\n  /**\n   * 로드뷰 시작 지역의 고유 아이디 값.\n   */\n  panoId?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수평 좌표값.\n   */\n  panoX?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수직 좌표값.\n   */\n  panoY?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수평 각. 0이 정북방향. (0_360)\n   */\n  pan?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수직 각.(-90_90)\n   */\n  tilt?: number\n\n  /**\n   * 로드뷰 줌 초기값.(-3_3)\n   */\n  zoom?: number\n\n  /**\n   * 로드뷰 생성후 해당 객체를 전달하는 callback.\n   */\n  onCreate?: (roadview: kakao.maps.Roadview) => void\n\n  /**\n   * 로드뷰가 초기화를 끝내면 발생한다.\n   */\n  onInit?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 파노라마 ID가 바뀌면 발생한다.\n   */\n  onPanoidChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 시점이 바뀌면 발생한다.\n   */\n  onViewpointChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 지도 좌표가 바뀌면 발생한다.\n   */\n  onPositionChanged?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * getNearestPanoId 동작 실패시 호출 합니다.\n   */\n  onErrorGetNearestPanoId?: (target: kakao.maps.Roadview) => void\n}\n\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview = React.forwardRef<\n  kakao.maps.Roadview,\n  React.PropsWithChildren<RoadviewProps>\n>(\n  (\n    {\n      id = \"react-kakao-maps-sdk-roadview-container\",\n      style,\n      children,\n      position,\n      className,\n      pan,\n      panoId,\n      panoX,\n      panoY,\n      tilt,\n      zoom,\n      onCreate,\n      onInit,\n      onPanoidChange,\n      onPositionChanged,\n      onViewpointChange,\n      onErrorGetNearestPanoId,\n    },\n    ref\n  ) => {\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [roadview, setRoadview] = useState<kakao.maps.Roadview>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n      if (!container.current) return\n\n      const kakaoRoadview = new kakao.maps.Roadview(container.current, {\n        pan: pan,\n        panoId: panoId,\n        panoX: panoX,\n        panoY: panoY,\n        tilt: tilt,\n        zoom: zoom,\n      })\n\n      setRoadview(kakaoRoadview)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, panoX, panoY, zoom])\n\n    useImperativeHandle(ref, () => roadview!, [roadview])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview || !onCreate) return\n      onCreate(roadview)\n    }, [roadview, onCreate])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        panoId ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n\n      new kakao.maps.RoadviewClient().getNearestPanoId(\n        newPostion,\n        position.radius,\n        (panoId) => {\n          if (panoId === null && onErrorGetNearestPanoId) {\n            onErrorGetNearestPanoId(roadview)\n          } else {\n            roadview.setPanoId(panoId, newPostion)\n          }\n        }\n      )\n    }, [\n      roadview,\n      panoId,\n      position.lat,\n      position.lng,\n      position.radius,\n      onErrorGetNearestPanoId,\n    ])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        !panoId ||\n        panoId === roadview.getPanoId() ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n      roadview.setPanoId(panoId, newPostion)\n    }, [roadview, panoId, position.lat, position.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview) return\n\n      const prevViewpoint = roadview.getViewpoint()\n\n      if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return\n\n      if (pan) prevViewpoint.pan = pan\n      if (tilt) prevViewpoint.tilt = tilt\n      roadview.setViewpoint(prevViewpoint)\n    }, [roadview, pan, tilt])\n\n    useKakaoEvent(roadview, \"init\", (target) => {\n      setIsLoading(false)\n      if (onInit) onInit(target)\n    })\n    useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange)\n    useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange)\n    useKakaoEvent(roadview, \"position_changed\", onPositionChanged)\n\n    return (\n      <>\n        <div id={id} className={className} style={style} ref={container}></div>\n        {roadview && !isLoading && (\n          <KakaoRoadviewContext.Provider value={roadview}>\n            {children}\n          </KakaoRoadviewContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Roadview\n","import { useContext } from \"react\"\nimport { KakaoRoadviewContext } from \"../components/Roadview\"\n\n/**\n * kakao roadview 객체를 가져오는 hook 입니다.\n * Roadview 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useRoadview = (componentName?: string) => {\n  const kakaoRoadview = useContext(KakaoRoadviewContext)\n  if (!kakaoRoadview) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useRoadview\"\n      } must exist inside Roadview Component!`\n    )\n  }\n\n  return kakaoRoadview\n}\n\nexport default useRoadview\n","import React, {\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface CustomOverlayRoadviewProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰상에서 커스텀 오버레이의 높이(위치)를 지정한다.\n   * 단위는 m(미터)이며 현재 로드뷰의 바닥 높이를 기준으로 떨어져있는 높이를 말한다.\n   */\n  altitude?: number\n\n  /**\n   * 커스텀 오버레이의 가시반경을 설정한다.\n   * 로드뷰의 위치와 커스텀 오버레이의 위치 사이의 거리가 가시반경 이내일 경우에만 로드뷰상에 노출된다.\n   * 단위는 m(미터)이며 기본값은 500m이다.\n   */\n  range?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Roadview에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayRoadview = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayRoadviewProps>\n>(\n  (\n    {\n      position,\n      children,\n      clickable,\n      xAnchor,\n      yAnchor,\n      zIndex,\n      altitude,\n      range,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`CustomOverlayRoadview`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!roadview) return\n\n      overlay.setMap(roadview)\n\n      return () => {\n        overlay.setMap(null)\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [overlay, roadview])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    useLayoutEffect(() => {\n      if (!altitude) return\n      overlay.setAltitude(altitude)\n    }, [overlay, altitude])\n\n    useLayoutEffect(() => {\n      if (!range) return\n      overlay.setRange(range)\n    }, [overlay, range])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayRoadview\n","import React, { useMemo } from \"react\"\nimport useRoadview from \"../hooks/useRoadview\"\nimport Marker from \"./Marker\"\n\nexport interface RoadviewMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<RoadviewMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      altitude,\n      clickable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      if (\"x\" in position) {\n        return new kakao.maps.Coords(position.x, position.y).toLatLng()\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.x,\n      // @ts-ignore\n      position.y,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position?.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <Marker\n        map={roadview}\n        position={markerPosition}\n        image={markerImage}\n        altitude={altitude}\n        clickable={clickable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        range={range}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default RoadviewMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface RoadviewInfoWindowProps {\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<RoadviewInfoWindowProps>\n>(\n  (\n    {\n      position,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewInfoWindow`)\n    const infoPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <InfoWindow\n        altitude={altitude}\n        disableAutoPan={disableAutoPan}\n        range={range}\n        removable={removable}\n        zIndex={zIndex}\n        map={roadview}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default RoadviewInfoWindow\n","import React, {\n  ReactNode,\n  Ref,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport const DrawingManagerContext =\n  React.createContext<kakao.maps.drawing.DrawingManager>(\n    undefined as unknown as kakao.maps.drawing.DrawingManager\n  )\n\nexport type DrawingManagerProps<\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n> = Partial<kakao.maps.drawing.OverlayOptions> &\n  Pick<kakao.maps.drawing.OverlayOptions, `${T}Options`> & {\n    /**\n     * 마우스 오버 시 가이드 툴팁 표시 여부. ‘draw’, ‘drag’, ‘edit’ 3가지를 지정할 수 있다 (기본값: 모두 표시 안함)\n     * 예를들어 [‘draw’]로 설정하면 객체를 그릴때 가이드 툴팁이 표시된다\n     */\n    guideTooltip?: Array<\"draw\" | \"drag\" | \"edit\">\n    /**\n     * 사용할 그리기 요소 지정한다 (기본값: 모든 그리기 요소)\n     */\n    drawingMode?: Array<T>\n\n    /**\n     * 그리기 요소를 선택하면 발생한다.\n     */\n    onSelect?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawstart?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 시작 후, 마우스를 이동하면 발생한다.\n     */\n    onDraw?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawend?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 다음 단계 그리기를 하면 발생한다. (Polyline, Polygon, Arrow 한정)\n     */\n    onDrawnext?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 취소하면 발생한다.\n     */\n    onCancle?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소를 삭제하면 발생한다.\n     */\n    onRemove?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소들의 상태가 변경되면 발생한다.\n     * 각 요소의 생성/수정/이동/삭제 동작과 undo 또는 redo 함수 호출이 이에 해당한다.\n     */\n    onStateChanged?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>\n    ) => void\n\n    /**\n     * 객체 생성후 해당 이벤트가 발생합니다.\n     */\n    onCreate?: (drawingManager: kakao.maps.drawing.DrawingManager<T>) => void\n\n    /**\n     * Toolbox에 대해서 추가할 때 사용합니다.\n     */\n    children?: ReactNode\n  }\n\nfunction useDrawingManagerEvent<T extends kakao.maps.drawing.OverlayType>(\n  target: kakao.maps.drawing.DrawingManager<T> | undefined,\n  type:\n    | \"drawstart\"\n    | \"draw\"\n    | \"drawend\"\n    | \"drawnext\"\n    | \"select\"\n    | \"cancel\"\n    | \"remove\"\n    | \"state_changed\",\n  callback:\n    | ((target: kakao.maps.drawing.DrawingManager<T>, ...args: any) => void)\n    | undefined\n) {\n  useLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    // @ts-ignore\n    target.addListener(type, wrapCallback)\n  }, [callback, target, type])\n}\n\n/**\n * 그리기 관리자 객체를 생성하는 컴포넌트 입니다.\n *\n * 초기 생성자에 필요한 Props는 최초 렌더링에만 반영을 하고 이후에는 값이 변경되더라도 적용되지 않습니다.\n *\n * > `on~` 시리즈를 제외한 props는 초기 렌더링 이후 작동 안함\n *\n * DrawingManager는 이전 Map, Marker, CustomOverlay와 달리 Props를 통해 제어를 하는 것이 아닌 직접 DrawingManager 객체를 이용하여 제어를 해야 합니다.\n *\n * 이를 위해 ref 객체를 통해 `DrawingManager` 객체를 접근 할 수 있으며, 이를 활용하여 여러 이벤트 처리 및 제어가 가능합니다.\n *\n * TypeScript 사용자를 위한 `Generic`이 적용되어 있으므로, `ref` 객체에 대한 typing 및 `drawingMode`에 대해 확실하게 정의해야 합니다.\n *\n * ```tsx\n * const Main = () => {\n *     const managerRef = useRef<kakao.maps.drawing.DrawingManager<\n *       kakao.maps.drawing.OverlayType.POLYLINE\n *     >>(null);\n *\n *     function selectOverlay(type: string) {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={(e) => {\n *           selectOverlay('POLYLINE')\n *         }}>선</button>\n *       </>\n *     )\n *   }\n * ```\n *\n * > JavaScript 코드 버전\n *\n * ```jsx live\n * function() {\n *   const Main = () => {\n *     const managerRef = useRef(null);\n *\n *     function selectOverlay() {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={selectOverlay}>선</button>\n *       </>\n *     )\n *   }\n *   return (<Main />)\n * }\n * ```\n */\nconst DrawingManager = React.forwardRef(function <\n  T extends kakao.maps.drawing.OverlayType\n>(\n  {\n    arrowOptions,\n    circleOptions,\n    ellipseOptions,\n    markerOptions,\n    polygonOptions,\n    polylineOptions,\n    rectangleOptions,\n    drawingMode,\n    guideTooltip,\n    onSelect,\n    onDrawstart,\n    onDraw,\n    onDrawend,\n    onDrawnext,\n    onCancle,\n    onRemove,\n    onStateChanged,\n    onCreate,\n    children,\n  }: DrawingManagerProps<T>,\n  ref: Ref<kakao.maps.drawing.DrawingManager<T>>\n) {\n  const map = useMap(\"Toolbox\")\n\n  const drawingManager = useMemo(\n    () => {\n      if (!window.kakao.maps.drawing) {\n        console.warn(\n          \"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n\n      // @ts-ignore\n      return new kakao.maps.drawing.DrawingManager({\n        map,\n        drawingMode,\n        guideTooltip,\n        arrowOptions,\n        circleOptions,\n        ellipseOptions,\n        markerOptions,\n        polygonOptions,\n        polylineOptions,\n        rectangleOptions,\n      })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n  useImperativeHandle(ref, () => drawingManager!, [drawingManager])\n\n  useLayoutEffect(() => {\n    drawingManager && onCreate && onCreate(drawingManager)\n  }, [drawingManager, onCreate])\n\n  useDrawingManagerEvent(drawingManager, \"select\", onSelect)\n  useDrawingManagerEvent(drawingManager, \"drawstart\", onDrawstart)\n  useDrawingManagerEvent(drawingManager, \"draw\", onDraw)\n  useDrawingManagerEvent(drawingManager, \"drawend\", onDrawend)\n  useDrawingManagerEvent(drawingManager, \"drawnext\", onDrawnext)\n  useDrawingManagerEvent(drawingManager, \"cancel\", onCancle)\n  useDrawingManagerEvent(drawingManager, \"remove\", onRemove)\n  useDrawingManagerEvent(drawingManager, \"state_changed\", onStateChanged)\n\n  if (!drawingManager) return null\n\n  return (\n    <DrawingManagerContext.Provider value={drawingManager}>\n      {children}\n    </DrawingManagerContext.Provider>\n  )\n}) as unknown as <\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n>(\n  _props: DrawingManagerProps<T> &\n    React.RefAttributes<kakao.maps.drawing.DrawingManager<T>>\n) => null\n\nexport default DrawingManager\n","import React, {\n  Ref,\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport { DrawingManagerContext } from \"./DrawingManager\"\n\nexport type ToolboxProps = {\n  /**\n   * Toolbox의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 그리기 툴박스를 생성합니다.\n *\n * 해당 컴포넌트는 반드시 `DrawingManager` 컴포넌트의 자식으로 존재해야 합니다.\n */\nconst Toolbox = React.forwardRef(function (\n  { position }: ToolboxProps,\n  ref: Ref<kakao.maps.drawing.Toolbox>\n) {\n  position = position || kakao.maps.ControlPosition.TOP\n\n  const map = useMap(\"Toolbox\")\n  const drawingmanager = useContext(DrawingManagerContext)\n\n  if (!drawingmanager) {\n    throw new Error(\"Toolbox must exist inside DrawingManager Component!`\")\n  }\n\n  const toolbox = useMemo(\n    () =>\n      new kakao.maps.drawing.Toolbox({\n        drawingManager: drawingmanager,\n      }),\n    [drawingmanager]\n  )\n  useImperativeHandle(ref, () => toolbox, [toolbox])\n\n  useLayoutEffect(() => {\n    const element = toolbox.getElement()\n    map.addControl(element, position!)\n    return () => {\n      map.removeControl(element)\n    }\n  }, [map, toolbox, position])\n\n  return null\n})\n\nexport default Toolbox\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\n\nexport interface StaticMapProps {\n  /**\n   * MapContinaer의 id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * MapContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * MapContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n\n  /**\n   * 확대 수준\n   * @default 3\n   */\n  level?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 이미지 지도에 표시할 마커 또는 마커 배열\n   */\n  marker:\n    | boolean\n    | {\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position?: {\n          lat: number\n          lng: number\n        }\n      }\n    | Array<{\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position: {\n          lat: number\n          lng: number\n        }\n      }>\n  /**\n   * StaticMap 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.StaticMap) => void\n}\n\nconst StaticMap = React.forwardRef<kakao.maps.StaticMap, StaticMapProps>(\n  (\n    {\n      id = \"react-kakao-maps-sdk-staticmap-container\",\n      style,\n      className,\n      center,\n      marker,\n      level,\n      mapTypeId,\n      onCreate,\n    },\n    ref\n  ) => {\n    const [map, setMap] = useState<kakao.maps.StaticMap>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      if (!window.kakao) {\n        console.warn(\n          \"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\"\n        )\n        return\n      }\n\n      const mapContainer = container.current\n      if (!mapContainer) return\n\n      kakao.maps.load(() => {\n        const _marker = (() => {\n          if (Array.isArray(marker)) {\n            return marker.map((mk) => {\n              return {\n                ...mk,\n                position: new kakao.maps.LatLng(\n                  mk.position.lat,\n                  mk.position.lng\n                ),\n              }\n            })\n          }\n          if (typeof marker === \"object\") {\n            if (!!marker.position) {\n              return {\n                ...marker,\n                position: new kakao.maps.LatLng(\n                  marker.position.lat,\n                  marker.position.lng\n                ),\n              }\n            }\n            return marker as { text: string }\n          }\n          return marker\n        })()\n        const kakaoStaticMap = new kakao.maps.StaticMap(mapContainer, {\n          center: new kakao.maps.LatLng(center.lat, center.lng),\n          level,\n          mapTypeId,\n          marker: _marker,\n        })\n\n        setMap(kakaoStaticMap)\n      })\n    }, [JSON.stringify(marker)])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map) map.setCenter(new kakao.maps.LatLng(center.lat, center.lng))\n    }, [map, center.lat, center.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && level) map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && mapTypeId) map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && onCreate) onCreate(map)\n    }, [map, onCreate])\n\n    return (\n      <div id={id} style={style} className={className} ref={container}></div>\n    )\n  }\n)\n\nexport default StaticMap\n","import React, { useEffect } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeIdProps {\n  /**\n   * MapTypeId를 정의 한다.\n   */\n  type: kakao.maps.MapTypeId\n}\n\n/**\n * 추가적으로 보이고 싶은 지도 타입을 추가 할 때 사용한다.\n */\nconst MapTypeId: React.FC<MapTypeIdProps> = ({ type }) => {\n  const map = useMap(`MapTypeId`)\n\n  useEffect(() => {\n    map.addOverlayMapTypeId(type)\n\n    return () => {\n      map.removeOverlayMapTypeId(type)\n    }\n  }, [map, type])\n\n  return null\n}\n\nexport default MapTypeId\n","import { useEffect, useMemo, useState } from \"react\"\nimport { Loader, LoaderOptions } from \"../util/kakaoMapApiLoader\"\n\n/**\n * Kakao Map Api를 injection 합니다.\n *\n * 해당 hook은 cleanup 시점에도 Kakao Map Api를 제거 하지 않고, 동일한 hook를 여러 위치에서 호출 하더라도 최초 한번만 injection 됩니다.\n */\nconst useInjectKakaoMapApi = (options: LoaderOptions) => {\n  const [state, setState] = useState<{\n    loading: boolean\n    error: ErrorEvent | undefined\n  }>({\n    loading: true,\n    error: undefined,\n  })\n\n  const loader = useMemo(\n    () => new Loader(options),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(options)]\n  )\n\n  useEffect(() => {\n    loader\n      .load()\n      .then(() =>\n        setState({\n          loading: false,\n          error: undefined,\n        })\n      )\n      .catch((error) =>\n        setState({\n          loading: false,\n          error: error,\n        })\n      )\n  }, [loader])\n\n  return state\n}\n\nexport default useInjectKakaoMapApi\n"],"names":["LoaderStatus","useIsomorphicLayoutEffect","window","document","useLayoutEffect","useEffect","useKakaoEvent","target","type","callback","wrapCallback","arg","undefined","kakao","maps","event","addListener","removeListener","Loader","appkey","id","libraries","nonce","retries","url","callbacks","done","loading","errors","onerrorEvent","this","instance","equalOptions","options","Error","JSON","stringify","isLoaded","Promise","resolve","status","FAILURE","INITIALIZED","LOADING","loadcheckcallbacks","push","e","load","reject","_this","loadCallback","err","error","fn","execute","resetIfRetryingFailed","failed","reset","deleteScript","console","warn","setScript","getElementById","createUrl","script","createElement","src","onerror","loadErrorCallback","bind","onload","defer","async","head","appendChild","source","lineno","colno","length","delay","log","setTimeout","_this2","join","remove","_this3","forEach","cb","a","b","i","SUCCESS","KakaoMapContext","React","createContext","Map","forwardRef","ref","style","children","center","isPanto","padding","className","disableDoubleClick","disableDoubleClickZoom","draggable","zoomable","keyboardShortcuts","level","maxLevel","minLevel","mapTypeId","projectionId","scrollwheel","tileAnimation","onBoundsChanged","onCenterChanged","onClick","onDoubleClick","onDrag","onDragEnd","onDragStart","onIdle","onMaptypeidChanged","onMouseMove","onRightClick","onTileLoaded","onZoomChanged","onZoomStart","onCreate","useState","setIsLoaded","map","setMap","container","useRef","then","MapContainer","current","initalMapCenter","LatLng","lat","lng","Coords","x","y","kakaoMap","useImperativeHandle","prevCenter","getCenter","toLatLng","centerPosition","equals","panTo","setCenter","setDraggable","setZoomable","setKeyboardShortcuts","setLevel","setMapTypeId","setProjectionId","setMaxLevel","setMinLevel","Provider","value","useMap","componentName","useContext","InfoWindow","position","marker","altitude","disableAutoPan","range","removable","zIndex","infoWindow","useMemo","kakaoInfoWindow","content","display","open","close","setPosition","setAltitude","setRange","setZIndex","parentElement","ReactDom","createPortal","KakaoMapMarkerClustererContext","MarkerClusterer","averageCenter","calculator","clickable","disableClickZoom","gridSize","hoverable","minClusterSize","styles","texts","onClusterclick","onClusterdblclick","onClustered","onClusterout","onClusterover","onClusterrightclick","markerCluster","setGridSize","redraw","setMinClusterSize","setAverageCenter","setTexts","setCalculator","setStyles","Marker","image","infoWindowOptions","onMouseOut","onMouseOver","opacity","title","addMarker","removeMarker","setImage","setClickable","setOpacity","setTitle","MapMarker","markerImage","MarkerImage","Size","size","width","height","alt","_image$options","coords","_image$options2","offset","Point","_image$options4","_image$options5","shape","_image$options6","spriteOrigin","_image$options8","_image$options9","spriteSize","_image$options11","_image$options12","markerPosition","MapInfoWindow","infoPosition","CustomOverlayMap","xAnchor","yAnchor","overlayPosition","overlay","KakaoCustomOverlay","CustomOverlay","ReactDOM","MapTypeControl","ControlPosition","TOPRIGHT","mapTypeControl","addControl","removeControl","ZoomControl","RIGHT","Circle","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeStyle","strokeWeight","onMouseover","onMouseout","onMousemove","onMousedown","circleCenter","circle","setRadius","setOptions","Polyline","path","endArrow","polyLinePath","every","v","Array","p","polyline","setPath","Polygon","polygonPath","polygon","Rectangle","bounds","rectangleBounds","LatLngBounds","sw","ne","rectangle","setBounds","Ellipse","rx","ry","ellipseCenter","ellipse","AbstractOverlay","draw","onAdd","onRemove","reactAbstractOverlay","KakaoRoadviewContext","Roadview","pan","panoId","panoX","panoY","tilt","zoom","onInit","onPanoidChange","onPositionChanged","onViewpointChange","onErrorGetNearestPanoId","isLoading","setIsLoading","roadview","setRoadview","kakaoRoadview","getPosition","getLat","getLng","newPostion","RoadviewClient","getNearestPanoId","setPanoId","getPanoId","prevViewpoint","getViewpoint","setViewpoint","useRoadview","CustomOverlayRoadview","Viewpoint","RoadviewMarker","RoadviewInfoWindow","DrawingManagerContext","useDrawingManagerEvent","DrawingManager","arrowOptions","circleOptions","ellipseOptions","markerOptions","polygonOptions","polylineOptions","rectangleOptions","drawingMode","guideTooltip","onSelect","onDrawstart","onDraw","onDrawend","onDrawnext","onCancle","onStateChanged","drawingManager","drawing","Toolbox","TOP","drawingmanager","toolbox","element","getElement","StaticMap","mapContainer","_marker","isArray","mk","kakaoStaticMap","addOverlayMapTypeId","removeOverlayMapTypeId","state","setState","loader","catch"],"mappings":"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"}